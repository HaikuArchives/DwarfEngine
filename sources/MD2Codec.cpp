/*
 *	    The Dwarf Engine 3D Library
 *          copyright (c) 2000
 *
 *  #include <license.txt>
 *
 */



#include "MD2Codec.h"

using namespace dwarf;

bool MD2Codec::CanEncode(const RawMesh& data) const
{
	return false;
}

bool MD2Codec::CanDecode(Buffer& data) const
{
	int32 magic, version;

	data >> magic >> version;

	if((magic == 0x32504449) && (version == 8)) return true;
	else return false;
}

bool MD2Codec::Encode(const RawMesh& from, Buffer& to) const
{
	return false;
}

bool MD2Codec::Decode(Buffer& from, RawMesh& to) const
{
	try
	{

		struct vec3s
		{
			float x,y,z;
		} normals[] = {
						{-0.525731, 0.000000, 0.850651}, 
						{-0.442863, 0.238856, 0.864188}, 
						{-0.295242, 0.000000, 0.955423}, 
						{-0.309017, 0.500000, 0.809017}, 
						{-0.162460, 0.262866, 0.951056}, 
						{0.000000, 0.000000, 1.000000}, 
						{0.000000, 0.850651, 0.525731}, 
						{-0.147621, 0.716567, 0.681718}, 
						{0.147621, 0.716567, 0.681718}, 
						{0.000000, 0.525731, 0.850651}, 
						{0.309017, 0.500000, 0.809017}, 
						{0.525731, 0.000000, 0.850651}, 
						{0.295242, 0.000000, 0.955423}, 
						{0.442863, 0.238856, 0.864188}, 
						{0.162460, 0.262866, 0.951056}, 
						{-0.681718, 0.147621, 0.716567}, 
						{-0.809017, 0.309017, 0.500000}, 
						{-0.587785, 0.425325, 0.688191}, 
						{-0.850651, 0.525731, 0.000000}, 
						{-0.864188, 0.442863, 0.238856}, 
						{-0.716567, 0.681718, 0.147621}, 
						{-0.688191, 0.587785, 0.425325}, 
						{-0.500000, 0.809017, 0.309017}, 
						{-0.238856, 0.864188, 0.442863}, 
						{-0.425325, 0.688191, 0.587785}, 
						{-0.716567, 0.681718, -0.147621}, 
						{-0.500000, 0.809017, -0.309017}, 
						{-0.525731, 0.850651, 0.000000}, 
						{0.000000, 0.850651, -0.525731}, 
						{-0.238856, 0.864188, -0.442863}, 
						{0.000000, 0.955423, -0.295242}, 
						{-0.262866, 0.951056, -0.162460}, 
						{0.000000, 1.000000, 0.000000}, 
						{0.000000, 0.955423, 0.295242}, 
						{-0.262866, 0.951056, 0.162460}, 
						{0.238856, 0.864188, 0.442863}, 
						{0.262866, 0.951056, 0.162460}, 
						{0.500000, 0.809017, 0.309017}, 
						{0.238856, 0.864188, -0.442863}, 
						{0.262866, 0.951056, -0.162460}, 
						{0.500000, 0.809017, -0.309017}, 
						{0.850651, 0.525731, 0.000000}, 
						{0.716567, 0.681718, 0.147621}, 
						{0.716567, 0.681718, -0.147621}, 
						{0.525731, 0.850651, 0.000000}, 
						{0.425325, 0.688191, 0.587785}, 
						{0.864188, 0.442863, 0.238856}, 
						{0.688191, 0.587785, 0.425325}, 
						{0.809017, 0.309017, 0.500000}, 
						{0.681718, 0.147621, 0.716567}, 
						{0.587785, 0.425325, 0.688191}, 
						{0.955423, 0.295242, 0.000000}, 
						{1.000000, 0.000000, 0.000000}, 
						{0.951056, 0.162460, 0.262866}, 
						{0.850651, -0.525731, 0.000000}, 
						{0.955423, -0.295242, 0.000000}, 
						{0.864188, -0.442863, 0.238856}, 
						{0.951056, -0.162460, 0.262866}, 
						{0.809017, -0.309017, 0.500000}, 
						{0.681718, -0.147621, 0.716567}, 
						{0.850651, 0.000000, 0.525731}, 
						{0.864188, 0.442863, -0.238856}, 
						{0.809017, 0.309017, -0.500000}, 
						{0.951056, 0.162460, -0.262866}, 
						{0.525731, 0.000000, -0.850651}, 
						{0.681718, 0.147621, -0.716567}, 
						{0.681718, -0.147621, -0.716567}, 
						{0.850651, 0.000000, -0.525731}, 
						{0.809017, -0.309017, -0.500000}, 
						{0.864188, -0.442863, -0.238856}, 
						{0.951056, -0.162460, -0.262866}, 
						{0.147621, 0.716567, -0.681718}, 
						{0.309017, 0.500000, -0.809017}, 
						{0.425325, 0.688191, -0.587785}, 
						{0.442863, 0.238856, -0.864188}, 
						{0.587785, 0.425325, -0.688191}, 
						{0.688191, 0.587785, -0.425325}, 
						{-0.147621, 0.716567, -0.681718}, 
						{-0.309017, 0.500000, -0.809017}, 
						{0.000000, 0.525731, -0.850651}, 
						{-0.525731, 0.000000, -0.850651}, 
						{-0.442863, 0.238856, -0.864188}, 
						{-0.295242, 0.000000, -0.955423}, 
						{-0.162460, 0.262866, -0.951056}, 
						{0.000000, 0.000000, -1.000000}, 
						{0.295242, 0.000000, -0.955423}, 
						{0.162460, 0.262866, -0.951056}, 
						{-0.442863, -0.238856, -0.864188}, 
						{-0.309017, -0.500000, -0.809017}, 
						{-0.162460, -0.262866, -0.951056}, 
						{0.000000, -0.850651, -0.525731}, 
						{-0.147621, -0.716567, -0.681718}, 
						{0.147621, -0.716567, -0.681718}, 
						{0.000000, -0.525731, -0.850651}, 
						{0.309017, -0.500000, -0.809017}, 
						{0.442863, -0.238856, -0.864188}, 
						{0.162460, -0.262866, -0.951056}, 
						{0.238856, -0.864188, -0.442863}, 
						{0.500000, -0.809017, -0.309017}, 
						{0.425325, -0.688191, -0.587785}, 
						{0.716567, -0.681718, -0.147621}, 
						{0.688191, -0.587785, -0.425325}, 
						{0.587785, -0.425325, -0.688191}, 
						{0.000000, -0.955423, -0.295242}, 
						{0.000000, -1.000000, 0.000000}, 
						{0.262866, -0.951056, -0.162460}, 
						{0.000000, -0.850651, 0.525731}, 
						{0.000000, -0.955423, 0.295242}, 
						{0.238856, -0.864188, 0.442863}, 
						{0.262866, -0.951056, 0.162460}, 
						{0.500000, -0.809017, 0.309017}, 
						{0.716567, -0.681718, 0.147621}, 
						{0.525731, -0.850651, 0.000000}, 
						{-0.238856, -0.864188, -0.442863}, 
						{-0.500000, -0.809017, -0.309017}, 
						{-0.262866, -0.951056, -0.162460}, 
						{-0.850651, -0.525731, 0.000000}, 
						{-0.716567, -0.681718, -0.147621}, 
						{-0.716567, -0.681718, 0.147621}, 
						{-0.525731, -0.850651, 0.000000}, 
						{-0.500000, -0.809017, 0.309017}, 
						{-0.238856, -0.864188, 0.442863}, 
						{-0.262866, -0.951056, 0.162460}, 
						{-0.864188, -0.442863, 0.238856}, 
						{-0.809017, -0.309017, 0.500000}, 
						{-0.688191, -0.587785, 0.425325}, 
						{-0.681718, -0.147621, 0.716567}, 
						{-0.442863, -0.238856, 0.864188}, 
						{-0.587785, -0.425325, 0.688191}, 
						{-0.309017, -0.500000, 0.809017}, 
						{-0.147621, -0.716567, 0.681718}, 
						{-0.425325, -0.688191, 0.587785}, 
						{-0.162460, -0.262866, 0.951056}, 
						{0.442863, -0.238856, 0.864188}, 
						{0.162460, -0.262866, 0.951056}, 
						{0.309017, -0.500000, 0.809017}, 
						{0.147621, -0.716567, 0.681718}, 
						{0.000000, -0.525731, 0.850651}, 
						{0.425325, -0.688191, 0.587785}, 
						{0.587785, -0.425325, 0.688191}, 
						{0.688191, -0.587785, 0.425325}, 
						{-0.955423, 0.295242, 0.000000}, 
						{-0.951056, 0.162460, 0.262866}, 
						{-1.000000, 0.000000, 0.000000}, 
						{-0.850651, 0.000000, 0.525731}, 
						{-0.955423, -0.295242, 0.000000}, 
						{-0.951056, -0.162460, 0.262866}, 
						{-0.864188, 0.442863, -0.238856}, 
						{-0.951056, 0.162460, -0.262866}, 
						{-0.809017, 0.309017, -0.500000}, 
						{-0.864188, -0.442863, -0.238856}, 
						{-0.951056, -0.162460, -0.262866}, 
						{-0.809017, -0.309017, -0.500000}, 
						{-0.681718, 0.147621, -0.716567}, 
						{-0.681718, -0.147621, -0.716567}, 
						{-0.850651, 0.000000, -0.525731}, 
						{-0.688191, 0.587785, -0.425325}, 
						{-0.587785, 0.425325, -0.688191}, 
						{-0.425325, 0.688191, -0.587785}, 
						{-0.425325, -0.688191, -0.587785}, 
						{-0.587785, -0.425325, -0.688191}, 
						{-0.688191, -0.587785, -0.425325}
					};
			
					
		// set up the RawMesh object
		to.m_objects.SetLength(1);
		RawMesh::object &object = to.m_objects[0];
		
		struct model_s
		{ 
			int32 magic; 
			int32 version; 
			int32 skinWidth; 
			int32 skinHeight; 
			int32 frameSize; 
			int32 numSkins; 
			int32 numVertices; 
			int32 numTexCoords; 
			int32 numTriangles; 
			int32 numGlCommands; 
			int32 numFrames; 
			int32 offsetSkins; 
			int32 offsetTexCoords; 
			int32 offsetTriangles; 
			int32 offsetFrames; 
			int32 offsetGlCommands; 
			int32 offsetEnd; 
		} md2_header;
		
		from.Read(reinterpret_cast<int8*>(&md2_header), sizeof(model_s));
		
		object.m_num_vertices = md2_header.numVertices;
		object.m_vertices.SetLength(object.m_num_vertices);
		
		from.Seek(md2_header.offsetFrames);
		
		struct frame_s
		{
			float scale[3];
			float translate[3];
			char name[16];
		} frame_header;
		
		from.Read(reinterpret_cast<int8*>(&frame_header), sizeof(frame_header));
		
		/*! \todo	for now we just read the first frame, the mesh class has no support for
					animation..
					
					the frame names are stored like: <name><nr>, ie: stand01, stand02 etc.
		*/

		for(int32 i = 0; i < object.m_num_vertices; i++)
		{
			uint8 x,y,z;
			int8 normal_index;
			
			from >> x >> y >> z >> normal_index;
			
			object.m_vertices[i] = Vertex<3>(
												(float)x * frame_header.scale[0] + frame_header.translate[0],
												(float)z * frame_header.scale[2] + frame_header.translate[2],
												(float)y * -frame_header.scale[1] + -frame_header.translate[1]);
		}

		from.Read(reinterpret_cast<int8*>(&frame_header), sizeof(frame_header));
		
		from.Seek(md2_header.offsetTriangles);
		object.m_indices.SetLength(md2_header.numTriangles);
		object.m_num_faces = md2_header.numTriangles;

		for(int32 i = 0; i < md2_header.numTriangles; i++)
		{
			int16 index;
			from >> index;
			object.m_indices[i].c = index;
			from >> index;
			object.m_indices[i].b = index;
			from >> index;
			object.m_indices[i].a = index;

			int16 dummy_uv;
			from >> dummy_uv >> dummy_uv >> dummy_uv;
		}

		logger(TEXT("\tMD2Codec: %d vertices"), object.m_num_vertices);
		logger(TEXT("\tMD2Codec: %d triangles"), object.m_num_faces);
		logger(TEXT("\tMD2Codec: %d glcommands"), md2_header.numGlCommands);
		logger(TEXT("\tMD2Codec: %dx%d pixels"), md2_header.skinWidth, md2_header.skinHeight);

		to.CalculateNormals();
	}
	catch(...)
	{
		return false;
	}

	return true;
}