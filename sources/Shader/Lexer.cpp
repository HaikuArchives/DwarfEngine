/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvsroot/DwarfEngine/sources/Shader/Lexer.cpp,v 1.12 2001/05/11 15:16:00 hydri Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
// daniel 26/4: class istream;
// #include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
// daniel 26/4: istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "FlexLexer.h"
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int ShaderLexer::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 92
#define YY_END_OF_BUFFER 93
static yyconst short int yy_accept[413] =
    {   0,
        0,    0,    0,    0,    5,    5,    0,    0,   93,   92,
       88,   90,   92,   72,   73,   77,   79,   74,   80,   91,
       78,   86,   71,   75,    9,   76,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   69,   70,
       89,    3,    2,    5,    7,    6,   11,   10,   88,    0,
       87,   85,    4,    1,    0,   86,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   84,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        5,    6,    6,    8,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   29,    0,
        0,    0,    0,    0,    0,    0,   50,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   66,    0,    0,    0,    0,   16,   68,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   40,    0,   61,    0,   17,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   23,    0,    0,    0,    0,   82,    0,    0,
        0,   30,    0,    0,    0,   83,   22,    0,    0,    0,
        0,    0,   41,   24,    0,   15,    0,    0,   13,    0,
        0,    0,   46,    0,    0,   64,    0,    0,    0,   62,
        0,    0,   20,    0,    0,    0,    0,    0,    0,    0,
       26,    0,    0,    0,    0,    0,    0,    0,   45,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   59,
        0,    0,    0,   49,   57,    0,   56,   12,   52,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   63,   65,
       67,    0,    0,   14,    0,    0,    0,    0,    0,   42,

        0,    0,    0,    0,    0,    0,    0,    0,   58,   21,
        0,    0,    0,    0,    0,   48,    0,    0,    0,    0,
        0,   18,    0,    0,    0,    0,    0,    0,   53,    0,
        0,   51,    0,    0,    0,   81,   28,   39,   34,   32,
        0,    0,    0,    0,   25,   47,    0,   33,   31,    0,
        0,   19,    0,    0,    0,    0,    0,    0,    0,   27,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   55,    0,    0,    0,   43,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   44,   54,    0,    0,    0,    0,   60,    0,

        0,    0,    0,    0,    0,    0,    0,   36,   38,   35,
       37,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    9,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    1,    1,    1,
       14,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       15,   16,   17,    1,   18,    1,   19,   20,   21,   22,

       23,   24,   25,   26,   27,    1,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,    1,   45,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[46] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[418] =
    {   0,
        0,  428,   43,   44,   45,   46,   47,   48,  430,  432,
      427,  432,  424,  432,  432,  432,  432,  432,  432,  414,
       49,   49,  432,  432,  432,  432,  397,   38,   34,   41,
       34,   51,  390,  393,   52,  391,   50,  391,  394,   44,
       68,   57,  381,  396,   56,  408,   71,   74,  432,  432,
      432,  432,  432,    0,  432,   81,  432,  432,  415,  412,
      432,  402,  432,  432,  401,   85,   66,   80,  390,  393,
      382,  381,  376,  371,  368,  368,  376,  375,  371,  379,
      362,  358,  363,  367,  358,  357,   73,  372,  357,  373,
      355,  351,   88,  371,  358,  359,  349,  365,  350,  343,

       47,   90,  348,  347,  362,  361,  360,  338,  358,  341,
        0,  102,  105,  432,  349,  355,  345,  344,  340,  340,
      337,  339,  330,  348,  338,  345,  327,  333,  330,  341,
      336,  335,  321,  333,  332,  331,  330,  334,  333,  329,
      324,  329,  310,  317,  313,  322,  432,  316,  323,  323,
      317,  302,  319,  314,  299,  312,  297,  310,  299,  290,
      289,  432,  288,  296,  308,  284,  432,  432,  303,  291,
      288,  295,  295,   97,  285,  290,  295,  287,  279,  278,
      279,  278,  294,   94,  432,  276,  432,  287,  279,  282,
      284,  269,  273,  281,  274,  279,  279,  265,  100,  262,

      260,  266,  432,  261,  264,  271,  269,  262,  264,  263,
      262,  432,  263,  251,  256,  432,  432,  254,  247,  254,
      250,  249,  432,  432,  248,  432,  256,  242,  432,  245,
      241,  248,  432,  240,  246,  432,  241,  248,  238,  432,
      240,  233,  432,  244,  237,  233,  243,  228,  237,  242,
      432,  219,  224,  226,  221,  220,  219,  231,  432,  221,
      227,  228,  217,  220,  217,  225,  211,  222,  209,  432,
      221,  204,  210,  432,  432,  203,  432,  432,  432,  206,
      209,  211,  213,  206,  203,  215,  213,  209,  432,  432,
      432,  199,  207,  432,  192,  201,  194,  195,  201,  205,

      204,  203,  183,  200,  180,  191,  190,  183,  432,  432,
      191,  177,  175,  181,  187,  432,  186,  171,  188,  171,
      182,  432,  172,  167,  179,  175,  171,  163,  432,  179,
      162,  432,  172,  160,  171,  432,  432,  432,  432,  432,
      162,  157,  172,  156,  432,  432,  171,  432,  432,  156,
      168,  432,  149,  167,  144,  145,  100,  147,  150,  432,
      157,  142,  159,  141,  141,  145,  138,  139,  140,  142,
      133,  148,  432,  144,  129,  134,  432,  147,  146,  131,
      143,  124,  105,  106,  125,  130,  132,  128,  124,  126,
      122,  123,  432,  432,  119,  122,  117,  120,  432,  121,

      103,  107,  100,  112,   95,  110,   93,  432,  432,  432,
      432,  432,  136,  139,  142,  119,  145
    } ;

static yyconst short int yy_def[418] =
    {   0,
      412,    1,  413,  413,  414,  414,  413,  413,  412,  412,
      412,  412,  415,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  416,  412,  417,  412,  412,  412,  415,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,

      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      416,  417,  417,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,

      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,

      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,

      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,    0,  412,  412,  412,  412,  412
    } ;

static yyconst short int yy_nxt[478] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   10,   27,   28,
       29,   30,   31,   32,   33,   10,   34,   10,   35,   36,
       37,   38,   39,   10,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   52,   52,   55,   55,   57,
       57,   56,   56,   53,   53,   63,   68,   58,   58,   65,
       64,   66,   70,   73,   75,   71,   69,   76,   90,   77,
       82,   72,   86,  153,   83,   91,   74,   78,   84,  100,
      107,   87,  104,  109,  154,   79,   92,  113,   93,  108,
      105,  101,  114,   94,   95,   65,  110,   66,  115,   96,

      117,   97,   98,  137,   99,  116,  144,  155,  412,  138,
      118,  113,  231,  412,  156,  220,  412,  221,  245,  111,
      246,  364,  145,  388,  390,  389,  391,  411,  410,  409,
      408,  407,  406,  232,  405,  365,   10,   10,   10,   54,
       54,   54,   60,   60,   60,  112,  404,  112,  403,  402,
      401,  400,  399,  398,  397,  396,  395,  394,  393,  392,
      387,  386,  385,  384,  383,  382,  381,  380,  379,  378,
      377,  376,  375,  374,  373,  372,  371,  370,  369,  368,
      367,  366,  363,  362,  361,  360,  359,  358,  357,  356,
      355,  354,  353,  352,  351,  350,  349,  348,  347,  346,

      345,  344,  343,  342,  341,  340,  339,  338,  337,  336,
      335,  334,  333,  332,  331,  330,  329,  328,  327,  326,
      325,  324,  323,  322,  321,  320,  319,  318,  317,  316,
      315,  314,  313,  312,  311,  310,  309,  308,  307,  306,
      305,  304,  303,  302,  301,  300,  299,  298,  297,  296,
      295,  294,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  279,  278,  277,  276,
      275,  274,  273,  272,  271,  270,  269,  268,  267,  266,
      265,  264,  263,  262,  261,  260,  259,  258,  257,  256,
      255,  254,  253,  252,  251,  250,  249,  248,  247,  244,

      243,  242,  241,  240,  239,  238,  237,  236,  235,  234,
      233,  230,  229,  228,  227,  226,  225,  224,  223,  222,
      219,  218,  217,  216,  215,  214,  213,  212,  211,  210,
      209,  208,  207,  206,  205,  204,  203,  202,  201,  200,
      199,  198,  197,  196,  195,  194,  193,  192,  191,  190,
      189,  188,  187,  186,  185,  184,  183,  182,  181,  180,
      179,  178,  177,  176,  175,  174,  173,  172,  171,  170,
      169,  168,  167,  166,  165,  164,  163,  162,  161,  160,
      159,  158,  157,  152,  151,  150,  149,  148,  147,  146,
      143,  142,  141,  140,  139,  136,  135,  134,  133,  132,

      131,  130,  129,  128,  127,  126,  125,  124,  123,  122,
      121,  120,  119,   62,   62,   61,   59,  106,  103,  102,
       89,   88,   85,   81,   80,   67,   62,   61,   59,  412,
       51,    9,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412
    } ;

static yyconst short int yy_chk[478] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    5,    6,    7,
        8,    5,    6,    3,    4,   21,   28,    7,    8,   22,
       21,   22,   29,   30,   31,   29,   28,   31,   40,   32,
       35,   29,   37,  101,   35,   40,   30,   32,   35,   42,
       47,   37,   45,   48,  101,   32,   41,   56,   41,   47,
       45,   42,   56,   41,   41,   66,   48,   66,   67,   41,

       68,   41,   41,   87,   41,   67,   93,  102,  112,   87,
       68,  113,  184,  112,  102,  174,  113,  174,  199,  416,
      199,  357,   93,  383,  384,  383,  384,  407,  406,  405,
      404,  403,  402,  184,  401,  357,  413,  413,  413,  414,
      414,  414,  415,  415,  415,  417,  400,  417,  398,  397,
      396,  395,  392,  391,  390,  389,  388,  387,  386,  385,
      382,  381,  380,  379,  378,  376,  375,  374,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  362,  361,
      359,  358,  356,  355,  354,  353,  351,  350,  347,  344,
      343,  342,  341,  335,  334,  333,  331,  330,  328,  327,

      326,  325,  324,  323,  321,  320,  319,  318,  317,  315,
      314,  313,  312,  311,  308,  307,  306,  305,  304,  303,
      302,  301,  300,  299,  298,  297,  296,  295,  293,  292,
      288,  287,  286,  285,  284,  283,  282,  281,  280,  276,
      273,  272,  271,  269,  268,  267,  266,  265,  264,  263,
      262,  261,  260,  258,  257,  256,  255,  254,  253,  252,
      250,  249,  248,  247,  246,  245,  244,  242,  241,  239,
      238,  237,  235,  234,  232,  231,  230,  228,  227,  225,
      222,  221,  220,  219,  218,  215,  214,  213,  211,  210,
      209,  208,  207,  206,  205,  204,  202,  201,  200,  198,

      197,  196,  195,  194,  193,  192,  191,  190,  189,  188,
      186,  183,  182,  181,  180,  179,  178,  177,  176,  175,
      173,  172,  171,  170,  169,  166,  165,  164,  163,  161,
      160,  159,  158,  157,  156,  155,  154,  153,  152,  151,
      150,  149,  148,  146,  145,  144,  143,  142,  141,  140,
      139,  138,  137,  136,  135,  134,  133,  132,  131,  130,
      129,  128,  127,  126,  125,  124,  123,  122,  121,  120,
      119,  118,  117,  116,  115,  110,  109,  108,  107,  106,
      105,  104,  103,  100,   99,   98,   97,   96,   95,   94,
       92,   91,   90,   89,   88,   86,   85,   84,   83,   82,

       81,   80,   79,   78,   77,   76,   75,   74,   73,   72,
       71,   70,   69,   65,   62,   60,   59,   46,   44,   43,
       39,   38,   36,   34,   33,   27,   20,   13,   11,    9,
        2,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#define INITIAL 0
#include "Shader/Lexer.h"
#include "Shader/Parser.h"
#include "Math.h"

using namespace dwarf;

#undef YY_DECL
#define YY_DECL int ShaderLexer::yylex(YY_ShaderParser_STYPE *val)
#define YY_NEVER_INTERACTIVE 1
/*IDENT		{LETTER}({LETTER}|{DIGIT})*	*/
#define one_line_comment 1

#define multi_line_comment 2

#define line_wrap_mode 3


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

// daniel 26/4: 		if ( ! yyin )
// daniel 26/4: yyin = &cin;

// daniel 26/4: 		if ( ! yyout )
// daniel 26/4: yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 413 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 432 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ BEGIN(one_line_comment); }
	YY_BREAK
case 2:
YY_RULE_SETUP

	YY_BREAK
case 3:
YY_RULE_SETUP
{ BEGIN(INITIAL); unput('\n'); }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ BEGIN(multi_line_comment); }
	YY_BREAK
case 5:
YY_RULE_SETUP

	YY_BREAK
case 6:
YY_RULE_SETUP

	YY_BREAK
case 7:
YY_RULE_SETUP

	YY_BREAK
case 8:
YY_RULE_SETUP
{ BEGIN(INITIAL); }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ BEGIN(line_wrap_mode); }
	YY_BREAK
case 10:
YY_RULE_SETUP

	YY_BREAK
case 11:
YY_RULE_SETUP
{ BEGIN(INITIAL); }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ShaderParser::SHADER; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ShaderParser::LAYER; }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ShaderParser::CULLING; }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ShaderParser::FRONT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ShaderParser::BACK; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ShaderParser::NONE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ShaderParser::FILLMODE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ShaderParser::WIREFRAME; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ShaderParser::SOLID; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ShaderParser::TEXTURE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ShaderParser::COLOR; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ShaderParser::BTRUE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ShaderParser::BFALSE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ShaderParser::LINEWIDTH; }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ShaderParser::UVGEN; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ShaderParser::ENVIRONMENT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ShaderParser::BLEND; }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ShaderParser::ONE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ShaderParser::ZERO; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ShaderParser::SRC_COLOR; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ShaderParser::DST_COLOR; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ShaderParser::SRC_ALPHA; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ShaderParser::DST_ALPHA; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ShaderParser::ONE_MINUS_SRC_ALPHA; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ShaderParser::ONE_MINUS_DST_ALPHA; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ShaderParser::ONE_MINUS_SRC_COLOR; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ShaderParser::ONE_MINUS_DST_COLOR; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ShaderParser::DEPTHTEST; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ShaderParser::LESS; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ShaderParser::EQUAL; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ShaderParser::GREATER; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ShaderParser::LESS_OR_EQUAL; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ShaderParser::GREATER_OR_EQUAL; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ShaderParser::ALWAYS; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ShaderParser::NEVER; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ShaderParser::NOT_EQUAL; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ShaderParser::ALPHAGEN; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ShaderParser::RGBGEN; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ShaderParser::SIN; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ShaderParser::TRIANGLE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ShaderParser::SQUARE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ShaderParser::SAWTOOTH; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ShaderParser::INVSAWTOOTH; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ShaderParser::UVTRANSFORM; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ShaderParser::SCROLL; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ShaderParser::ROTATE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ShaderParser::STRETCH; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ShaderParser::LINEAR; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ShaderParser::VERTEXTRANSFORM; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ShaderParser::MOVE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ShaderParser::SCALE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ShaderParser::AXISX; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ShaderParser::AXISX; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return ShaderParser::AXISY; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return ShaderParser::AXISY; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ShaderParser::AXISZ; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return ShaderParser::AXISZ; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return '{'; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return '}'; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return '='; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return '('; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ return ')'; }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ return ','; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ return '['; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ return ']'; }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ return '*'; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ return '/'; }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ return '+'; }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ return '-'; }
	YY_BREAK
case 81:
YY_RULE_SETUP
{ return ShaderParser::WRAPMODE; }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ return ShaderParser::WRAP; }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ return ShaderParser::CLAMP; }
	YY_BREAK
case 84:
YY_RULE_SETUP
{ val->number = D_PI; return ShaderParser::FLOAT; }
	YY_BREAK
case 85:
YY_RULE_SETUP
{
				val->number = atof(YYText());
				return ShaderParser::FLOAT;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
				val->integer = atoi(YYText());
				return ShaderParser::INTEGER;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
				int32 i = 0;
				for (; i < min((int)strlen(YYText()+1)-1, 255); i++)
					val->str[i] = YYText()[i+1];
				val->str[i] = 0;
				return ShaderParser::STRING;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{}
	YY_BREAK
case 89:
YY_RULE_SETUP
{ logger(TEXT("Empty line!!!")); }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ return ShaderParser::EOL; }
	YY_BREAK
case 91:
YY_RULE_SETUP
{ return ShaderParser::ERROR_TOKEN; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(one_line_comment):
case YY_STATE_EOF(multi_line_comment):
case YY_STATE_EOF(line_wrap_mode):
{ yyterminate();}
	YY_BREAK
case 92:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			// daniel 26/4:  yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer()
	{
// daniel 26/4: 	yyin = arg_yyin;
// daniel 26/4: 	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams()
	{
// daniel 26/4: 	if ( new_in )
// daniel 26/4: 		{
// daniel 26/4: 		yy_delete_buffer( yy_current_buffer );
// daniel 26/4: 		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
// daniel 26/4: 		}

// daniel 26/4: 	if ( new_out )
// daniel 26/4: 		yyout = new_out;
// daniel 26/4: 	}
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
// daniel 26/4: 
/*
	
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
*/
	return 0;
  }

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
// daniel 26/4: 	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(); // daniel 26/4:
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 413 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 413 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 412);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


void yyFlexLexer::yyrestart()
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	// daniel 26/4: yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer(int size)
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b );

	return b;
	}

void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b )

	{
	yy_flush_buffer( b );

// daniel 26/4: 	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
// daniel 26/4: 	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
